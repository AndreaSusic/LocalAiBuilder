Why the “Attempting to inject editor bridge…” log never turns into “Bridge ready!”

Your React side is adding the <script> tag, but the browser refuses to
execute it because it still points to another origin (localhost:5000
inside the iframe).  The quick Express-route fix removed the 404/403, but the
iframe still violates Same-Origin Policy, so the code is silently
blocked and the bridge never calls window.__GAS_BRIDGE_READY().

Instead of loading a URL, inject the raw JavaScript text directly into the
preview DOM.  That keeps everything on the same origin and CORS disappears.

⸻

1 · Turn the dynamic import() into an inline-script injection

// DesktopDashboard.jsx  (or the module where you build the preview iframe)
async function injectBridge () {
-  // previous attempt – still cross-origin
-  await import("http://localhost:5000/editorBridge.js");

+  // ① fetch the bridge JS *as text* (still hits your server route)
+  const res  = await fetch("/editorBridge.js");
+  if (!res.ok) throw new Error("bridge fetch failed");
+  const code = await res.text();

+  // ② inject as inline <script> so the browser treats it as same-origin
+  const tag  = document.createElement("script");
+  tag.id     = "goaisite-bridge";
+  tag.type   = "text/javascript";
+  tag.textContent = code + "\n//# sourceURL=goaisite_bridge.js";
+  document.head.appendChild(tag);
+
+  // ③ wait until the bridge notifies readiness
+  await new Promise((ok, err) => {
+    window.addEventListener("gas-bridge-ready", ok, { once:true });
+    setTimeout(() => err(new Error("bridge timeout")), 4000);
+  });
 }

Minimal change inside editorBridge.js

Add a one-liner at the bottom so it shouts when it finishes loading:

// editorBridge.js  (unchanged content above)
dispatchEvent(new Event("gas-bridge-ready"));


⸻

2 · Verify the flow
	1.	Network tab – you should see one GET /editorBridge.js 200.
	2.	Elements tab – a <script id="goaisite-bridge"> … </script> appears in
<head>.
	3.	Console – now prints

🔧 Attempting to inject editor bridge…
✅ Editor bridge ready – inline

(the second line is the resolved promise in the snippet above).

⸻

3 · If you still get nothing, enable strict logging

Inside editorBridge.js wrap the public API with console traces:

console.log("[bridge] injected, origin:", location.origin);
window.goAISite = {
  highlight(el){ console.log("[bridge] highlight", el); /*…*/ },
  // …
};
dispatchEvent(new Event("gas-bridge-ready"));


⸻

4 · Remove the CORS headache altogether (optional)

If you prefer the “serve JS file” approach, move the preview iframe onto
the same sub-domain as the dashboard so the request is not cross-origin in
the first place.  Replit makes that tricky (two different port proxies), so the
inline-script technique above is usually the quickest win.

⸻

TL;DR
	•	Stop importing /editorBridge.js as a module.
	•	Fetch → inject → fire custom event → listen from React.
	•	Same-origin is restored, the editor bridge boots, and the inline editor UI
shows up again.