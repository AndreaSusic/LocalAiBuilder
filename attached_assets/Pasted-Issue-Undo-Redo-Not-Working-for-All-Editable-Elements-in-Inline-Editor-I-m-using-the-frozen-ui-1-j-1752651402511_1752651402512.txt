Issue: Undo/Redo Not Working for All Editable Elements in Inline Editor

Iâ€™m using the frozen-ui-1.js inline editing and delete overlay system (see attached file). After deleting or editing some elements using the overlay buttons (e.g., <a> tags in the footer or .icon divs), undo/redo becomes unreliable:
	â€¢	If I delete or edit an element and then hit Undo, the element is not restored, or sometimes other elements disappear.
	â€¢	The console shows ðŸš« DOM-based undo disabled - React state system handles undo/redo, but not all deletes/edits are reflected in React state (see UndoRedoMessageHandler.jsx.js).
	â€¢	It appears that if an element does not have a data-edit attribute, the delete falls back to direct DOM removal, so React doesnâ€™t know about it and canâ€™t restore it.

What I need:
	1.	All inline edits and deletes, even for elements that donâ€™t have a data-edit attribute (like  in footer and .icon divs), should be processed through React state/history, so Undo/Redo always works and no elements permanently disappear.
	2.	If an element is deleted or changed, the correct message should be sent to React so that state/history updates and the UI can be re-rendered from state.
	3.	Please audit the overlay button delete/edit logic to ensure NO action ever falls back to raw DOM manipulation without updating React state/history.
	4.	Optionally: If an element cannot be mapped to a React state field, warn/log, but never just remove from DOM; prompt the user that the element isnâ€™t undoable, or, better, map those elements into state as well so everything is always recoverable.

Context:
	â€¢	My use-case is live editing marketing/corporate sites with many different element types, and I need full reliable Undo/Redo for all edits/deletions.
	â€¢	See attached files for current overlay logic and UndoRedoMessageHandler.jsx.js for message handling.

How to test:
	1.	Delete any element (including <a> in footer, .icon divs, etc.).
	2.	Perform Undo (via Ctrl+Z or UI).
	3.	The element should always come back, with no missing siblings or corrupted UI.

Please advise if a schema update is needed to map more elements to the React state. Otherwise, patch the event handling so all user edits route through state/history.