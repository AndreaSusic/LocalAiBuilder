# FILE: public/chat.html

1. Replace both upload and color picker HTML with these lines (put them *immediately after* the chatThread div):

<!-- These will be inserted dynamically, so don't add here. -->
<!-- Remove any existing <label id="wrapColours">… or <div id="dropArea">… from the markup. -->

# FILE: public/chat.js

2. Remove all prior insertions of .bubble.ai.

3. Change handleMissing() so:
   • When prompting for colours, insert the picker HTML *just after* the relevant AI bubble, then show .wrapColours below the label.
   • When prompting for images, insert the drop-area HTML *just after* the AI bubble, so it appears below the question.
   • Never create or show .bubble.ai anymore.
   • The chatPane has display: block.

Here’s the new handleMissing() and helpers:

// Create & insert colour picker and image drop area dynamically
function insertAfter(node, html){
  const div = document.createElement('div');
  div.innerHTML = html;
  node.parentNode.insertBefore(div.firstElementChild, node.nextSibling);
}

// Remove all old pickers/drop areas if present
function cleanupExtras(){
  document.querySelectorAll('.wrapColours, .drop-zone').forEach(e=>e.remove());
}

function handleMissing(res){
  mergeState(res);
  cleanupExtras();

  // Step 1: Ask for text Qs
  const order = ['company_name','city','industry','language','services'];
  const next  = order.find(k=>state[k]===null);

  if(next){
    const Q={
      company_name:'What’s the name of your business?',
      city:'Which city do you mainly serve?',
      industry:'What industry best describes your business?',
      language:'What primary language should the website use?',
      services:'List your most important services or products.'
    }[next];
    const lastAI=convo.filter(m=>m.role==='assistant').pop()?.content;
    if(lastAI!==Q){
      // Insert Q as plain <p> NOT .bubble.ai
      const p=document.createElement('p');
      p.className='prompt-label';
      p.textContent=Q;
      thread.appendChild(p);
      convo.push({role:'assistant',content:Q});
      awaitingKey=next;
      thread.scrollTop = thread.scrollHeight;
    }
    return;
  }

  // Step 2: Colours
  if(state.colours===null){
    const colourQ = 'Please pick two brand colours.';
    const lastAI = convo.filter(m=>m.role==='assistant').pop()?.content;
    if(lastAI!==colourQ){
      // Insert as plain <p>
      const p=document.createElement('p');
      p.className='prompt-label';
      p.textContent=colourQ;
      thread.appendChild(p);
      // Insert colour picker below
      insertAfter(p, `
        <label class="wrapColours">
          Primary <input type="color" id="col1" value="#ffc000">
          Secondary <input type="color" id="col2" value="#000000">
          <button id="colourDone">Done</button>
        </label>
      `);
      convo.push({role:'assistant',content:colourQ});
      $('colourDone').onclick = ()=>{
        state.colours = [col1.value, col2.value];
        cleanupExtras();
        askNextQuestion();
      };
      thread.scrollTop = thread.scrollHeight;
    }
    return;
  }

  // Step 3: Images
  if(images.length===0 && !document.querySelector('.drop-zone')){
    const imgQ = 'Can you upload images and a logo for me to use on your website?';
    const p=document.createElement('p');
    p.className='prompt-label';
    p.textContent=imgQ;
    thread.appendChild(p);
    insertAfter(p, `
      <div id="dropArea" class="drop-zone">
        <p>Drag & drop images/logo here or <label class="file-label">browse
          <input type="file" id="fileInput" accept="image/*" multiple hidden>
        </label></p>
      </div>
    `);
    convo.push({role:'assistant',content:imgQ});
    // re-wire drag/drop and input logic as before
    // ... (use your previous image code here)
    thread.scrollTop = thread.scrollHeight;
    return;
  }

  // Step 4: Done
  const p=document.createElement('p');
  p.className='prompt-label';
  p.textContent='Great! Generating your site…';
  thread.appendChild(p);
  fetch('/api/build-site',{
    method:'POST',headers:{'Content-Type':'application/json'},
    body:JSON.stringify({state, convo})
  });
  thread.scrollTop = thread.scrollHeight;
}

function askNextQuestion(){ handleMissing({}); }

# FILE: public/styles.css

4. Add:
.chatPane {display:block;}
.prompt-label {font-weight:600; margin:0.8em 0 0.5em 0.2em;}
.wrapColours{margin:1rem 0;padding:.8rem;border:1px dashed #bbb;border-radius:8px;display:flex;gap:.8em;align-items:center;}
.drop-zone{border:2px dashed #bbb;border-radius:8px;padding:1rem;text-align:center;color:#666;margin-bottom:1rem;}
.drop-zone.dragover{border-color:#ffc000;background:#fffbe9;}
.file-label{color:#0050c8;cursor:pointer;text-decoration:underline;}

5. Remove all .bubble.ai CSS (if any remains).

# RESULT:
• All “AI” responses now show as clean <p> labels, not bubbles.
• Colour pickers and image drop-zone each appear below their respective prompt label.
• Only one is visible at a time, in the correct order.
• .chatPane uses display:block.