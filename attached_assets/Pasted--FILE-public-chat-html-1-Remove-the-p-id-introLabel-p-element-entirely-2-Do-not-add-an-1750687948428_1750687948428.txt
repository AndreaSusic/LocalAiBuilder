# FILE: public/chat.html

1. Remove the <p id="introLabel">…</p> element entirely.

2. Do not add any colour picker (.wrapColours) or image drop-zone (.drop-zone) markup directly in the HTML; these elements will be dynamically inserted as needed.

# FILE: public/chat.js

3. Update handleMissing() so that:
   • The label “Please pick two brand colours.” is added as a <p class="prompt-label">, and the .wrapColours picker appears directly below it (inserted after that <p>).
   • The label “Can you upload images and a logo for me to use on your website?” is added as a <p class="prompt-label">, and the .drop-zone appears directly below it (inserted after that <p>).
   • Both elements are only visible when needed in the flow.
   • All other questions are also presented as <p class="prompt-label"> in order.

Here is the key section for handleMissing():

function handleMissing(res){
  mergeState(res);
  cleanupExtras();

  // Step 1: Ask for text Qs (company, city, industry, language, services)
  const order = ['company_name','city','industry','language','services'];
  const next  = order.find(k=>state[k]===null);

  if(next){
    const Q={
      company_name:'What’s the name of your business?',
      city:'Which city do you mainly serve?',
      industry:'What industry best describes your business?',
      language:'What primary language should the website use?',
      services:'List your most important services or products.'
    }[next];
    const lastAI=convo.filter(m=>m.role==='assistant').pop()?.content;
    if(lastAI!==Q){
      const p=document.createElement('p');
      p.className='prompt-label';
      p.textContent=Q;
      thread.appendChild(p);
      convo.push({role:'assistant',content:Q});
      awaitingKey=next;
      thread.scrollTop = thread.scrollHeight;
    }
    return;
  }

  // Step 2: Colours (if missing)
  if(state.colours===null){
    const colourQ = 'Please pick two brand colours.';
    const lastAI = convo.filter(m=>m.role==='assistant').pop()?.content;
    if(lastAI!==colourQ){
      const p=document.createElement('p');
      p.className='prompt-label';
      p.textContent=colourQ;
      thread.appendChild(p);
      // Insert colour picker directly under label
      insertAfter(p, `
        <label class="wrapColours">
          Primary <input type="color" id="col1" value="#ffc000">
          Secondary <input type="color" id="col2" value="#000000">
          <button id="colourDone">Done</button>
        </label>
      `);
      convo.push({role:'assistant',content:colourQ});
      $('colourDone').onclick = ()=>{
        state.colours = [col1.value, col2.value];
        cleanupExtras();
        askNextQuestion();
      };
      thread.scrollTop = thread.scrollHeight;
    }
    return;
  }

  // Step 3: Images (if missing)
  if(images.length===0 && !document.querySelector('.drop-zone')){
    const imgQ = 'Can you upload images and a logo for me to use on your website?';
    const p=document.createElement('p');
    p.className='prompt-label';
    p.textContent=imgQ;
    thread.appendChild(p);
    insertAfter(p, `
      <div id="dropArea" class="drop-zone">
        <p>Drag & drop images/logo here or <label class="file-label">browse
          <input type="file" id="fileInput" accept="image/*" multiple hidden>
        </label></p>
      </div>
    `);
    convo.push({role:'assistant',content:imgQ});
    // (re-wire drag/drop/file logic as before)
    thread.scrollTop = thread.scrollHeight;
    return;
  }

  // Step 4: Done
  const p=document.createElement('p');
  p.className='prompt-label';
  p.textContent='Great! Generating your site…';
  thread.appendChild(p);
  fetch('/api/build-site',{
    method:'POST',headers:{'Content-Type':'application/json'},
    body:JSON.stringify({state, convo})
  });
  thread.scrollTop = thread.scrollHeight;
}

function askNextQuestion(){ handleMissing({}); }

// Helper: insertAfter()
function insertAfter(node, html){
  const div = document.createElement('div');
  div.innerHTML = html;
  node.parentNode.insertBefore(div.firstElementChild, node.nextSibling);
}

// Helper: cleanupExtras()
function cleanupExtras(){
  document.querySelectorAll('.wrapColours, .drop-zone').forEach(e=>e.remove());
}

# FILE: public/styles.css

4. At the end of your CSS, add or update:
.chatPane {display:block;}
.prompt-label {font-weight:600; margin:0.8em 0 0.5em 0.2em;}
.wrapColours{margin:1rem 0;padding:.8rem;border:1px dashed #bbb;border-radius:8px;display:flex;gap:.8em;align-items:center;}
.drop-zone{border:2px dashed #bbb;border-radius:8px;padding:1rem;text-align:center;color:#666;margin-bottom:1rem;}
.drop-zone.dragover{border-color:#ffc000;background:#fffbe9;}
.file-label{color:#0050c8;cursor:pointer;text-decoration:underline;}

# RESULT:
• .wrapColours and .drop-zone only appear right under their respective labels and only when needed in the conversation flow.
• All prompts appear as <p class="prompt-label">.
• .chatPane is display: block.
• No mention or handling of .bubble.ai anywhere in the code.
• #introLabel is removed.