// Helper: Insert new HTML after a node
function insertAfter(node, html){
  const temp = document.createElement('div');
  temp.innerHTML = html;
  node.parentNode.insertBefore(temp.firstElementChild, node.nextSibling);
}

// Helper: Remove any extra color pickers or drop-zones before adding new ones
function cleanupExtras(){
  document.querySelectorAll('.wrapColours, .drop-zone').forEach(e=>e.remove());
}

// Call this function after every step, e.g. after a question is asked/answered
function handleMissing(res){
  mergeState(res);  // Your merge logic
  cleanupExtras();

  // 1. Ask for text fields first (company, city, etc.)
  const order = ['company_name','city','industry','language','services'];
  const next = order.find(k=>state[k] === null);

  if(next){
    const Q = {
      company_name: 'What’s the name of your business?',
      city: 'Which city do you mainly serve?',
      industry: 'What industry best describes your business?',
      language: 'What primary language should the website use?',
      services: 'List your most important services or products.'
    }[next];

    // Insert as plain label
    const p = document.createElement('p');
    p.className = 'prompt-label';
    p.textContent = Q;
    thread.appendChild(p);
    convo.push({role:'assistant', content:Q});
    awaitingKey = next;
    thread.scrollTop = thread.scrollHeight;
    return;
  }

  // 2. If color pickers missing, insert under color label
  if(state.colours === null){
    const label = 'Please pick two brand colours.';
    const p = document.createElement('p');
    p.className = 'prompt-label';
    p.textContent = label;
    thread.appendChild(p);

    insertAfter(p, `
      <label class="wrapColours">
        Primary <input type="color" id="col1" value="#ffc000">
        Secondary <input type="color" id="col2" value="#000000">
        <button id="colourDone">Done</button>
      </label>
    `);
    convo.push({role:'assistant', content:label});
    $('colourDone').onclick = ()=>{
      state.colours = [col1.value, col2.value];
      cleanupExtras();
      askNextQuestion();
    };
    thread.scrollTop = thread.scrollHeight;
    return;
  }

  // 3. If images missing, insert drop zone under image label
  if(images.length === 0 && !document.querySelector('.drop-zone')){
    const label = 'Can you upload images and a logo for me to use on your website?';
    const p = document.createElement('p');
    p.className = 'prompt-label';
    p.textContent = label;
    thread.appendChild(p);

    insertAfter(p, `
      <div id="dropArea" class="drop-zone">
        <p>Drag & drop images/logo here or <label class="file-label">browse
          <input type="file" id="fileInput" accept="image/*" multiple hidden>
        </label></p>
      </div>
    `);
    convo.push({role:'assistant', content:label});
    // (Wire up your file/drag-drop handlers as before)
    thread.scrollTop = thread.scrollHeight;
    return;
  }

  // 4. Everything collected
  const p = document.createElement('p');
  p.className = 'prompt-label';
  p.textContent = 'Great! Generating your site…';
  thread.appendChild(p);
  fetch('/api/build-site', {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({state, convo})
  });
  thread.scrollTop = thread.scrollHeight;
}

function askNextQuestion(){ handleMissing({}); }