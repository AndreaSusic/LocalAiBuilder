
You are a world-class Node.js engineer.

### Goal
Create a tiny CLI/REST utility that returns the **owner-written Business Description** for a Google Business Profile (GBP) location, using the **Business Information API**.

### Stack
* Node.js 18+
* “googleapis” npm package v130+
* dotenv for secrets
* Express (optional) for a simple /description endpoint
* package.json run scripts

---

## 1  Project Scaffolding
* Create package.json with:
  - scripts: dev, start, get:description
* Add .gitignore: node_modules, .env

## 2  Dependencies

npm install googleapis express dotenv

## 3  Environment variables (.env.sample)

Google OAuth 2.0

CLIENT_ID=           # OAuth client for “Desktop App” or “Web App”
CLIENT_SECRET=
REFRESH_TOKEN=       # From the GBP owner/manager account
LOCATION_ID=         # Numeric Location ID e.g. 12345678901234567890
PROJECT_PORT=5000

* Copy to `.env` in the workspace.

## 4  src/googleClient.js
```js
import { google } from 'googleapis';
import dotenv from 'dotenv';
dotenv.config();

const scopes = ['https://www.googleapis.com/auth/business.manage'];

export function getAuthClient() {
  const { CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN } = process.env;
  const oauth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, 'urn:ietf:wg:oauth:2.0:oob');
  oauth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });
  return oauth2Client;
}

export function businessInfoClient() {
  return google.mybusinessbusinessinformation({
    version: 'v1',
    auth: getAuthClient()
  });
}

5  src/getDescription.js

import { businessInfoClient } from './googleClient.js';
import dotenv from 'dotenv';
dotenv.config();

export async function fetchDescription(locationId = process.env.LOCATION_ID) {
  const gmb = businessInfoClient();
  const res = await gmb.locations.get({
    name: `locations/${locationId}`,
    readMask: 'attributes'
  });

  const attr = res.data.attributes?.find(a => a.attributeId === 'general:DESCRIPTION');
  return attr?.values?.[0]?.stringValue || '(No description set)';
}

// Run from CLI:  npm run get:description
if (process.argv[1].includes('getDescription.js')) {
  fetchDescription().then(console.log).catch(err => {
    console.error('❌ Error fetching description:', err.response?.data || err.message);
    process.exit(1);
  });
}

6  src/server.js  (optional REST wrapper)

import express from 'express';
import { fetchDescription } from './getDescription.js';
import dotenv from 'dotenv';
dotenv.config();

const app = express();
app.get('/description', async (_req, res) => {
  try {
    const desc = await fetchDescription();
    res.json({ description: desc });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});
app.listen(process.env.PROJECT_PORT, () =>
  console.log(`🚀 Server on http://localhost:${process.env.PROJECT_PORT}/description`)
);

7  package.json scripts

"scripts": {
  "dev": "node src/server.js",
  "start": "node src/server.js",
  "get:description": "node src/getDescription.js"
}

8  README.md (quick-start)
	1.	cp .env.sample .env and fill in credentials.
	2.	npm install
	3.	CLI: npm run get:description – outputs the description text.
	4.	REST: npm run dev → GET /description.

9  Notes for the user
	•	The REFRESH_TOKEN must be generated with the business.manage scope and an account that is Owner/Manager of the GBP location.
	•	If you need multiple locations, expose LOCATION_ID as a query param (e.g. /description?loc=…).
	•	No front-end required; keep it back-end-only.

Generate all files now.
